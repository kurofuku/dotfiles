diff -ruN clamav-clamav-0.104.0-org/clamonacc/client/client.c clamav-clamav-0.104.0/clamonacc/client/client.c
--- clamav-clamav-0.104.0-org/clamonacc/client/client.c	2021-08-28 07:24:15.000000000 +0900
+++ clamav-clamav-0.104.0/clamonacc/client/client.c	2021-09-29 15:14:46.471579054 +0900
@@ -548,7 +548,7 @@
  * @param err       return variable passed to the daemon protocol interface indicating how many things went wrong in the course of scanning
  * @param ret_code  return variable passed to the daemon protocol interface indicating last known issue or success
  */
-int onas_client_scan(const char *tcpaddr, int64_t portnum, int32_t scantype, uint64_t maxstream, const char *fname, int fd, int64_t timeout, STATBUF sb, int *infected, int *err, cl_error_t *ret_code)
+int onas_client_scan(const char *tcpaddr, int64_t portnum, int32_t scantype, uint64_t maxstream, const char *fname, int fd, int64_t timeout, struct onas_context *ctx, STATBUF sb, int *infected, int *err, cl_error_t *ret_code)
 {
     CURL *curl        = NULL;
     CURLcode curlcode = CURLE_OK;
@@ -583,7 +583,7 @@
         disconnected = false;
     }
 
-    if ((ret = onas_dsresult(curl, scantype, maxstream, fname, fd, timeout, &ret, err, ret_code)) >= 0) {
+    if ((ret = onas_dsresult(curl, scantype, maxstream, fname, fd, timeout, ctx, &ret, err, ret_code)) >= 0) {
         *infected = ret;
     } else {
         logg("*ClamClient: connection could not be established ... return code %d\n", *ret_code);
diff -ruN clamav-clamav-0.104.0-org/clamonacc/client/client.h clamav-clamav-0.104.0/clamonacc/client/client.h
--- clamav-clamav-0.104.0-org/clamonacc/client/client.h	2021-08-28 07:24:15.000000000 +0900
+++ clamav-clamav-0.104.0/clamonacc/client/client.h	2021-09-29 15:14:46.471579054 +0900
@@ -40,7 +40,7 @@
 };
 
 void onas_print_server_version(struct onas_context **ctx);
-int onas_client_scan(const char *tcpaddr, int64_t portnum, int32_t scantype, uint64_t maxstream, const char *fname, int fd, int64_t timeout, STATBUF sb, int *infected, int *err, cl_error_t *ret_code);
+int onas_client_scan(const char *tcpaddr, int64_t portnum, int32_t scantype, uint64_t maxstream, const char *fname, int fd, int64_t timeout, struct onas_context *ctx, STATBUF sb, int *infected, int *err, cl_error_t *ret_code);
 CURLcode onas_curl_init(CURL **curl, const char *ipaddr, int64_t port, int64_t timeout);
 int onas_get_clamd_version(struct onas_context **ctx);
 cl_error_t onas_setup_client(struct onas_context **ctx);
diff -ruN clamav-clamav-0.104.0-org/clamonacc/client/protocol.c clamav-clamav-0.104.0/clamonacc/client/protocol.c
--- clamav-clamav-0.104.0-org/clamonacc/client/protocol.c	2021-08-28 07:24:15.000000000 +0900
+++ clamav-clamav-0.104.0/clamonacc/client/protocol.c	2021-09-29 15:14:32.721709293 +0900
@@ -228,11 +228,111 @@
 }
 #endif
 
+static pthread_mutex_t virusaction_lock = PTHREAD_MUTEX_INITIALIZER;
+
+static void xfree(void *p)
+{
+    if (p)
+        free(p);
+}
+
+#define VE_FILENAME "CLAM_VIRUSEVENT_FILENAME"
+#define VE_VIRUSNAME "CLAM_VIRUSEVENT_VIRUSNAME"
+
+void virusaction(const char *filename, const char *virname,
+                 const struct optstruct *opts)
+{
+    pid_t pid;
+    const struct optstruct *opt;
+    char *buffer_file, *buffer_vir, *buffer_cmd, *path;
+    const char *pt;
+    size_t i, j, v = 0, f = 0, len;
+    char *env[4];
+
+    if (!(opt = optget(opts, "OnAccessVirusEvent")) || !opt->enabled) {
+        logg("*OnAccessVirusEvent not found\n");
+        return;
+    }
+
+    path   = getenv("PATH");
+    env[0] = path ? strdup(path) : NULL;
+    j      = env[0] ? 1 : 0;
+    /* Allocate env vars.. to be portable env vars should not be freed */
+    buffer_file =
+        (char *)malloc(strlen(VE_FILENAME) + strlen(filename) + 2);
+    if (buffer_file) {
+        sprintf(buffer_file, "%s=%s", VE_FILENAME, filename);
+        env[j++] = buffer_file;
+    }
+
+    buffer_vir =
+        (char *)malloc(strlen(VE_VIRUSNAME) + strlen(virname) + 2);
+    if (buffer_vir) {
+        sprintf(buffer_vir, "%s=%s", VE_VIRUSNAME, virname);
+        env[j++] = buffer_vir;
+    }
+    env[j++] = NULL;
+
+    pt = opt->strarg;
+    while ((pt = strstr(pt, "%v"))) {
+        pt += 2;
+        v++;
+    }
+    pt = opt->strarg;
+    while ((pt = strstr(pt, "%f"))) {
+        pt += 2;
+        f++;
+    }
+    len = strlen(opt->strarg);
+    buffer_cmd =
+        (char *)calloc(len + v * strlen(virname) + f * strlen(filename) + 1, sizeof(char));
+    if (!buffer_cmd) {
+        if (path)
+            xfree(env[0]);
+
+        xfree(buffer_file);
+        xfree(buffer_vir);
+        return;
+    }
+    for (i = 0, j = 0; i < len; i++) {
+        if (i + 1 < len && opt->strarg[i] == '%' && opt->strarg[i + 1] == 'v') {
+            strcat(buffer_cmd, virname);
+            j += strlen(virname);
+            i++;
+        } else if (i + 1 < len && opt->strarg[i] == '%' && opt->strarg[i + 1] == 'f') {
+            strcat(buffer_cmd, filename);
+            j += strlen(filename);
+            i++;
+        } else {
+            buffer_cmd[j++] = opt->strarg[i];
+        }
+    }
+
+    pthread_mutex_lock(&virusaction_lock);
+    /* We can only call async-signal-safe functions after fork(). */
+    pid = vfork();
+    if (pid == 0) { /* child */
+        _exit(execle("/bin/sh", "sh", "-c", buffer_cmd, NULL, env));
+    } else if (pid > 0) { /* parent */
+        pthread_mutex_unlock(&virusaction_lock);
+        while (waitpid(pid, NULL, 0) == -1 && errno == EINTR) continue;
+    } else {
+        pthread_mutex_unlock(&virusaction_lock);
+        logg("!VirusEvent: fork failed.\n");
+    }
+    if (path)  
+        xfree(env[0]);
+
+    xfree(buffer_cmd);
+    xfree(buffer_file);
+    xfree(buffer_vir);
+}
+
 /* Sends a proper scan request to clamd and parses its replies
  * This is used only in non IDSESSION mode
  * Returns the number of infected files or -1 on error
  * NOTE: filename may be NULL for STREAM scantype. */
-int onas_dsresult(CURL *curl, int scantype, uint64_t maxstream, const char *filename, int fd, int64_t timeout, int *printok, int *errors, cl_error_t *ret_code)
+int onas_dsresult(CURL *curl, int scantype, uint64_t maxstream, const char *filename, int fd, int64_t timeout, struct onas_context *ctx, int *printok, int *errors, cl_error_t *ret_code)
 {
     int infected = 0, len = 0, beenthere = 0;
     char *bol, *eol;
@@ -370,6 +470,7 @@
                         logg("~%s%s FOUND\n", filename, colon);
                         if (action) {
                             action(filename);
+                            virusaction(filename, colon, ctx->clamdopts);
                         }
                     } else {
                         logg("~%s FOUND\n", bol);
diff -ruN clamav-clamav-0.104.0-org/clamonacc/client/protocol.h clamav-clamav-0.104.0/clamonacc/client/protocol.h
--- clamav-clamav-0.104.0-org/clamonacc/client/protocol.h	2021-08-28 07:24:15.000000000 +0900
+++ clamav-clamav-0.104.0/clamonacc/client/protocol.h	2021-09-29 15:14:32.721709293 +0900
@@ -27,5 +27,5 @@
 #include "misc.h"
 #include "../clamonacc.h"
 
-int onas_dsresult(CURL *curl, int scantype, uint64_t maxstream, const char *filename, int fd, int64_t timeout, int *printok, int *errors, cl_error_t *ret_code);
+int onas_dsresult(CURL *curl, int scantype, uint64_t maxstream, const char *filename, int fd, int64_t timeout, struct onas_context *ctx, int *printok, int *errors, cl_error_t *ret_code);
 #endif
diff -ruN clamav-clamav-0.104.0-org/clamonacc/scan/onas_queue.c clamav-clamav-0.104.0/clamonacc/scan/onas_queue.c
--- clamav-clamav-0.104.0-org/clamonacc/scan/onas_queue.c	2021-08-28 07:24:15.000000000 +0900
+++ clamav-clamav-0.104.0/clamonacc/scan/onas_queue.c	2021-09-29 15:13:12.132478665 +0900
@@ -45,7 +45,7 @@
 #include "onas_queue.h"
 
 static void onas_scan_queue_exit(void *arg);
-static int onas_consume_event(threadpool thpool);
+static int onas_consume_event(threadpool thpool, struct onas_context *ctx);
 static cl_error_t onas_new_event_queue_node(struct onas_event_queue_node **node);
 static void onas_destroy_event_queue_node(struct onas_event_queue_node *node);
 
@@ -169,7 +169,7 @@
     pthread_cleanup_push(onas_scan_queue_exit, NULL);
     logg("*ClamScanQueue: waiting to consume events ...\n");
     do {
-        onas_consume_event(thpool);
+        onas_consume_event(thpool, ctx);
     } while (1);
 
     pthread_cleanup_pop(1);
@@ -185,7 +185,7 @@
     return 0;
 }
 
-static int onas_consume_event(threadpool thpool)
+static int onas_consume_event(threadpool thpool, struct onas_context *ctx)
 {
     pthread_mutex_lock(&onas_queue_lock);
 
@@ -198,6 +198,8 @@
     g_onas_event_queue_head->next->prev       = g_onas_event_queue_head;
     g_onas_event_queue.size--;
 
+    popped_node->data->ctx                    = ctx;
+
     pthread_mutex_unlock(&onas_queue_lock);
 
     thpool_add_work(thpool, (void *)onas_scan_worker, (void *)popped_node->data);
diff -ruN clamav-clamav-0.104.0-org/clamonacc/scan/thread.c clamav-clamav-0.104.0/clamonacc/scan/thread.c
--- clamav-clamav-0.104.0-org/clamonacc/scan/thread.c	2021-08-28 07:24:15.000000000 +0900
+++ clamav-clamav-0.104.0/clamonacc/scan/thread.c	2021-09-29 15:20:25.458440501 +0900
@@ -128,7 +128,7 @@
     pthread_mutex_lock(&onas_scan_lock);
 
     ret = onas_client_scan(event_data->tcpaddr, event_data->portnum, event_data->scantype, event_data->maxstream,
-                           fname, fd, event_data->timeout, sb, infected, err, ret_code);
+                           fname, fd, event_data->timeout, event_data->ctx, sb, infected, err, ret_code);
 
     pthread_mutex_unlock(&onas_scan_lock);
 
diff -ruN clamav-clamav-0.104.0-org/clamonacc/scan/thread.h clamav-clamav-0.104.0/clamonacc/scan/thread.h
--- clamav-clamav-0.104.0-org/clamonacc/scan/thread.h	2021-08-28 07:24:15.000000000 +0900
+++ clamav-clamav-0.104.0/clamonacc/scan/thread.h	2021-09-29 15:12:56.832625980 +0900
@@ -64,6 +64,7 @@
     int64_t maxstream;
     int64_t timeout;
     uint8_t bool_opts;
+    struct onas_context *ctx;
 } __attribute((packed));
 
 #ifdef HAVE_PRAGMA_PACK
diff -ruN clamav-clamav-0.104.0-org/common/optparser.c clamav-clamav-0.104.0/common/optparser.c
--- clamav-clamav-0.104.0-org/common/optparser.c	2021-08-28 07:24:15.000000000 +0900
+++ clamav-clamav-0.104.0/common/optparser.c	2021-09-29 15:12:16.523016187 +0900
@@ -487,6 +487,8 @@
 
     {"OnAccessDenyOnError", NULL, 0, CLOPT_TYPE_BOOL, MATCH_BOOL, 0, NULL, 0, OPT_CLAMD, "When using prevention, if this option is turned on, any errors that occur during scanning will result in the event attempt being denied. This could potentially lead to unwanted system behaviour with certain configurations, so the client defaults to off and allowing access events in case of error.", "yes"},
 
+    {"OnAccessVirusEvent", NULL, 0, CLOPT_TYPE_STRING, NULL, -1, NULL, 0, OPT_CLAMD, "clamonacc executes this command when a virus is found. In the command string %v will be\nreplaced with the virus name and %f will be replaced with the file name.\nAdditionally, two environment variables will be defined: $CLAM_VIRUSEVENT_FILENAME\nand $CLAM_VIRUSEVENT_VIRUSNAME.", "/usr/bin/mailx -s \"ClamAV VIRUS ALERT: %v\" alert < /dev/null"},
+
     /* clamonacc cmdline options */
 
     {NULL, "watch-list", 'W', CLOPT_TYPE_STRING, NULL, -1, NULL, 0, OPT_CLAMONACC, "", ""},
